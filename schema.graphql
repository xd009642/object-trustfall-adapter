schema {
    query: RootSchemaQuery 
}

type RootSchemaQuery {
    loadFile(path: String!): ObjectFile
}

type ObjectFile {
    text_section: [DecodedInstruction!]!

    getInstruction(address: Int!): DecodedInstruction

    debug_info: [SourceLocation!]!
    
    getLocation(address: Int!): SourceLocation
    getFileLocations(file: String!): [SourceLocation]
    getFileInstructions(file: String!): [DecodedInstruction]

    getFunctions(): [Function] 
}

type Function {
    address: Int!
    name: String!
    stack_size: Int!
    instructions: [DecodedInstruction]
    """
    Thought here is that the block will refer to it's children as each function will have one root block
    """
    basic_blocks: BasicBlock 
}

type SourceLocation {
    """
    The name of the source code file
    """
    file: String!
    """
    The start line of the location
    """
    line: Int!
    """
    The column used - or null if this is a leftmost column
    """
    column: Int
}

type BasicBlock {
    base_address: Int!
    instructions: [DecodedInstruction]
    children: [BasicBlock]
}

type DecodedInstruction {
    """
    Address in memory of the instruction (this is the same as the Instruction Pointer)
    """
    address: Int!
    """
    Name of the instruction (in NASM)
    """
    name: String!
    """
    Operands of the instruction
    """
    operands: [String]
    """
    Length of the instruction in bytes
    """
    length: Int!
}
